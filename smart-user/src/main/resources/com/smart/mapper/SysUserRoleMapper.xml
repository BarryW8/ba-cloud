<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.smart.mapper.SysUserRoleMapper">

    <resultMap id="BaseResultMap" type="com.smart.vo.SysUserRoleVO">
        <result column="sys_id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="user_name" property="userName"/>
        <result column="role_id" property="roleId"/>
        <result column="role_name" property="roleName"/>
        <result column="note" property="note"/>
        <result column="order_by" property="orderBy"/>
        <result column="create_time" property="createTime"/>
        <result column="create_user_id" property="createUserId"/>
        <result column="create_user_name" property="createUserName"/>
        <result column="update_time" property="updateTime"/>
        <result column="update_user_id" property="updateUserId"/>
        <result column="update_user_name" property="updateUserName"/>
    </resultMap>

    <sql id="Base_Column_List">
        ur.sys_id,
        ur.user_id,
        ur.role_id,
        ur.order_by,
        ur.note,
        ur.create_time,
        ur.create_user_id,
        ur.update_time,
        ur.update_user_id,
        ur.update_user_name,
        u.user_name,
        r.role_name
    </sql>

    <insert id="save" parameterType="com.smart.vo.SysUserRoleVO">
        insert into sys_user_role (
            sys_id,
            user_id,
            role_id,
            note,
            order_by,
            create_time,
            create_user_id,
            create_user_name
        ) values (
             #{id},
             #{userId},
             #{roleId},
             #{note},
             #{orderBy},
             #{createTime},
             #{createUserId},
             #{createUserName}
        )
    </insert>

    <!-- 批量新增 -->
    <insert id="saveList">
        insert into sys_user_role (
            sys_id,
            user_id,
            role_id,
            note,
            order_by,
            create_time,
            create_user_id,
            create_user_name
        ) values
        <foreach collection="list" item="item" index="index" separator=",">
        (
            #{item.id},
            #{item.userId},
            #{item.roleId},
            #{item.note},
            #{item.orderBy},
            #{item.createTime},
            #{item.createUserId},
            #{item.createUserName}
        )
        </foreach>
    </insert>

    <!-- 逻辑删除 -->
    <update id="deleteBySm" parameterType="com.smart.base.SimpleModel">
        update sys_user_role
        set is_delete=1,
            update_user_id=#{delUser},
            update_user_name=#{delUserName},
            update_time=#{delDate}
        where sys_id = #{modelId}
    </update>

    <update id="update" parameterType="com.smart.vo.SysUserRoleVO">
        update sys_user_role
        SET user_id = #{userId},
            role_id = #{roleId},
            note = #{note},
            order_by = #{orderBy},
            update_time = #{updateTime},
            update_user_id = #{updateUserId},
            update_user_name = #{updateUserName}
        where id = #{id}
    </update>

    <select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sys_user_role ur
        left join sys_user u on ur.user_id = u.sys_id
        left join sys_role r on ur.role_id = r.sys_id
        where ur.is_delete=0
        and u.is_delete=0
        and r.is_delete=0
        and sys_id = #{id}
    </select>

    <select id="findPage" resultMap="BaseResultMap" parameterType="com.smart.base.Page">
        select
        <include refid="Base_Column_List"/>
        from sys_user_role ur
        left join sys_user u on ur.user_id = u.sys_id
        left join sys_role r on ur.role_id = r.sys_id
        where ur.is_delete=0
        and u.is_delete=0
        and r.is_delete=0
        <if test="sql != '' and sql != null">
            ${sql}
        </if>
        order by ur.create_time desc, ur.order_by desc
        limit #{page},#{pageSize}
    </select>

    <select id="count" resultType="java.lang.Integer">
        select count(*)
        from sys_user_role ur
        left join sys_user u on ur.user_id = u.sys_id
        left join sys_role r on ur.role_id = r.sys_id
        where ur.is_delete=0
        and u.is_delete=0
        and r.is_delete=0
        <if test="tmpSql != '' and tmpSql != null">
            ${tmpSql}
        </if>
    </select>

    <select id="findList" parameterType="String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        FROM sys_user_role ur
        left join sys_user u on ur.user_id = u.sys_id
        left join sys_role r on ur.role_id = r.sys_id
        where ur.is_delete=0
        and u.is_delete=0
        and r.is_delete=0
        <if test="sql != '' and sql != null">
            ${sql}
        </if>
        order by ur.create_time desc, ur.order_by desc
    </select>

    <!-- 根据用户id 物理删除 -->
    <delete id="deleteByRoleId">
        delete from sys_user_role
        where role_id = #{roleId}
    </delete>

    <!-- 根据用户id 物理删除 -->
    <delete id="deleteByUserId">
        delete from sys_user_role
        where user_id = #{userId}
    </delete>

</mapper>
